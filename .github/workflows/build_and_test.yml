name: CI - Build and Test

on: [ push, pull_request, workflow_dispatch ]

jobs:
  build:
    name: ${{ matrix.os }}, ${{ matrix.cmake_name }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macos-10.15, ubuntu-18.04, ubuntu-20.04, ubuntu-22.04 ]
        cmake: [ 3.16, 3.x ]
        exclude:
          - os: windows-latest
            cmake: 3.16

        include:
          - os: ubuntu-18.04
            WARNINGS_AS_ERRORS: OFF

          - os: ubuntu-20.04
            COVERAGE: ON
            GCOV_TOOL: gcov-9
            WARNINGS_AS_ERRORS: OFF

          - os: macos-10.15
            WARNINGS_AS_ERRORS: OFF

          - os: windows-latest
            static_postfix: _static
            WARNINGS_AS_ERRORS: OFF
            CXX: cl

          - cmake: 3.16
            cmake_name: CMake 3.16
          - cmake: 3.x
            cmake_name: CMake Latest

    runs-on: ${{ matrix.os }}

    env:
      # CMake 3.15 doesn't detect Visual Studio correctly without these.
      CXX: ${{ matrix.CXX }}
      CC: ${{ matrix.CXX }}

    steps:
      - uses: actions/checkout@v2
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Setup Windows environment
        if: matrix.cmake == '3.16'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 16.7

      - name: Setup Windows environment
        if: matrix.cmake != '3.16'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.x
      - name: Install pip dependencies
        run: |
          pip3 install wheel setuptools
          pip3 install conan

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: ${{matrix.cmake}}

      - name: Install apt dependencies
        if: runner.os == 'Linux'
        run: sudo apt install lcov ^libxcb-*

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Set CMake arguments
        id: cmake_args
        run: echo "::set-output name=CMAKE_ARGS::-DUNIT_TESTS_RUN_ON_CI=1 -DWARNINGS_AS_ERRORS=OFF"

      # Static Debug
      - name: "Static Debug: Configure"
        run: cmake -G Ninja -S . -B build-static-dbg -DCMAKE_BUILD_TYPE=Debug "-DCMAKE_DEBUG_POSTFIX=d${{matrix.static_postfix}}" ${{ steps.cmake_args.outputs.CMAKE_ARGS }}
      - name: "Static Debug: Build"
        run: cmake --build build-static-dbg --parallel
      - name: "Static Debug: Test"
        run: ctest --output-on-failure --stop-on-failure
        working-directory: build-static-dbg
        env:
          QT_QPA_PLATFORM: offscreen

      # Shared Debug
      - name: "Shared Debug: Configure"
        run: cmake -G Ninja -S . -B build-shared-dbg -DCMAKE_BUILD_TYPE=Debug -DCMAKE_DEBUG_POSTFIX=d -DBUILD_SHARED_LIBS=ON "-DENABLE_COVERAGE=${{ matrix.COVERAGE }}" ${{ steps.cmake_args.outputs.CMAKE_ARGS }}
      - name: "Shared Debug: Build"
        run: cmake --build build-shared-dbg --parallel
      - name: "Shared Debug: Test"
        run: ctest --output-on-failure --stop-on-failure
        working-directory: build-shared-dbg
        env:
          QT_QPA_PLATFORM: offscreen

      # Static Release
      - name: "Static Release: Configure"
        run: cmake -G Ninja -S . -B build-static-rel -DCMAKE_BUILD_TYPE=Release "-DCMAKE_RELEASE_POSTFIX=${{matrix.static_postfix}}" ${{ steps.cmake_args.outputs.CMAKE_ARGS }}
      - name: "Static Release: Build"
        run: cmake --build build-static-rel --parallel
      - name: "Static Release: Test"
        run: ctest --output-on-failure --stop-on-failure
        working-directory: build-static-rel
        env:
          QT_QPA_PLATFORM: offscreen

      # Shared Release
      - name: "Shared Release: Configure"
        run: cmake -G Ninja -S . -B build-shared-rel -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON ${{ steps.cmake_args.outputs.CMAKE_ARGS }}
      - name: "Shared Release: Build"
        run: cmake --build build-shared-rel --parallel
      - name: "Shared Release: Test"
        run: ctest --output-on-failure --stop-on-failure
        working-directory: build-shared-rel
        env:
          QT_QPA_PLATFORM: offscreen

      # Joint install
      - name: Install
        run: |
          cmake --install build-shared-dbg --prefix install
          cmake --install build-static-dbg --prefix install
          cmake --install build-shared-rel --prefix install
          cmake --install build-static-rel --prefix install

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test_results_${{ matrix.os }}
          path: build*/**/*.xml

      - name: Generate and upload coverage reports
        if: matrix.COVERAGE == 'ON'
        working-directory: build-shared-dbg
        run: |
          lcov --gcov-tool ${{ matrix.GCOV_TOOL }} --directory . --capture --output-file coverage.info # capture coverage info
          lcov --gcov-tool ${{ matrix.GCOV_TOOL }} --remove coverage.info '/usr/*' --output-file coverage.info # filter out system
          lcov --gcov-tool ${{ matrix.GCOV_TOOL }} --list coverage.info #debug info
          bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"

  publish-test-results:
    name: "Publish Unit Test Results from ${{ matrix. os }}"
    needs: build
    strategy:
      matrix:
        os: [ ubuntu-18.04, ubuntu-20.04 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Unit Test Results ${{ matrix.os }}
        uses: EnricoMi/publish-unit-test-result-action@v1.4
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: Unit Test Results ${{ matrix.os }}
          hide_comments: all but latest
          comment_on_pr: true
          files: artifacts/test_results_${{ matrix. os}}/tests/ut/*.xml
          report_individual_runs: true
          deduplicate_classes_by_file_name: false

